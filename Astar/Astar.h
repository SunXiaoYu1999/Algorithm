#pragma once
#include <iostream>
#include "myHeap.h"
#include "myHead.h"

class AStar
{
public:
	/*+++++++++++++++++++++++++++++++++++++++++++++ construct ++++++++++++++++++++++++++++++++++++++++++*/
	AStar();

	/*+++++++++++++++++++++++++++++++++++++++++++++ destruct ++++++++++++++++++++++++++++++++++++++++++*/
	~AStar();


	/*+++++++++++++++++++++++++++++++++++++++++++++++++ SetMap ++++++++++++++++++++++++++++++++++++++++++
	@ param map : 地图
	@ param col : 地图行数
	@ param row : 地图列数
	@ function  : 设置待求解地图
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	void SetMap(int** map, int col, int row);

	/*+++++++++++++++++++++++++++++++++++++++++++++++++ SetStartEnd ++++++++++++++++++++++++++++++++++++++
	@ param end   : 终点坐标
	@ function    : 设置终点与起点
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	void SetStartEnd(const MyPoint start, const MyPoint end);


	/*+++++++++++++++++++++++++++++++++++++++++++++++++ run +++++++++++++++++++++++++++++++++++++++++++++
	@ param display ：是否进行图形化显示，false代表不进行图形化展示，true代表进行图形化展示
	@ function      ：运行算法
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	void run(bool display = false);


private:
	/*--------------------------------------------- init ----------------------------------------
	@ function      ：初始化
	---------------------------------------------------------------------------------------------*/
	void init();

	/*---------------------------------------- CalAssessValue ------------------------------------
	@ function      ：计算评估值
	--------------------------------------------------------------------------------------------*/
	void CalAssessValue(Node &node);

	/*---------------------------------------- UpdataNodeMap ------------------------------------
	@ function      ：更新求解时地图
	--------------------------------------------------------------------------------------------*/
	void UpdataNodeMap(Node &node);
	
	/*---------------------------------------- GetCurNode ------------------------------------
	@ curNode		：当前节点
	@ dir			：方向值 0,1,2,3,4,5,6,7  代表八个方向 (0)右、(1)右下、(2)下、(3)左下、(4)左、(5)左上、(6)上、(7)右上
	@ function      ：取得当前父亲节点的下一个节点
	--------------------------------------------------------------------------------------------*/
	bool GetCurNode(Node &curNode,Node parentNode ,int &dir,int step = 1);

	/*---------------------------------------- CalCurrentValue ------------------------------------
	@ function      ：计算当前走过的值
	--------------------------------------------------------------------------------------------*/
	void CalCurrentValue(Node &node);

	/*---------------------------------------- PutWayInResult ------------------------------------
	@ function      ：写入求解结果
	--------------------------------------------------------------------------------------------*/
	void PutWayInResult();

private:
	int** map;	// 地图
	int col;	// 行数
	int row;	// 列数

	myHeap minHeap;		// 最小队列
	MyPoint start;		// 起点
	MyPoint end;		// 终点

	vector<MyPoint> result;		// 最终路径
	Node **mapNode;				// 求解时的地图
};
